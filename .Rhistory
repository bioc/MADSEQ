lines(cov_0.05,mono_sites500,col="lightsteelblue",type="b",lwd=2,pch=18)
lines(cov_0.05,mono_sites1000,col="orange3",type="b",lwd=2,pch=17)
lines(cov_0.05,tri_sites200,col="green4",type="b",lwd=2,pch=1,lty=3)
lines(cov_0.05,tri_sites500,col="lightsteelblue",type="b",lwd=2,pch=5,lty=3)
lines(cov_0.05,tri_sites1000,col="orange3",type="b",lwd=2,pch=2,lty=3)
str(normal)
load("~/Project/Aneuploidy/MADSEQ/Untitled.RData")
str(normal)
class(normal)
normal["posterior"]
str(meiotic_trisomy)
library(MADSEQ)
save.image("~/Project/Aneuploidy/MADSEQ/Untitled.RData")
setwd("~/Project/Aneuploidy")
load("~/Project/Aneuploidy/Untitled.RData")
load("~/Project/Aneuploidy/quantilenorm.RData")
head(EB8_p)
head(EB8_f)
norm_mean
names(norm_mean)
names(norm_mean) = CHR
CHR = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22")
names(norm_mean) = CHR
N1 = norm_mean$chr8
norm_mean = as.data.frame(norm_mean)
N1 = norm_mean$chr8
N2 = EB8_f[EB8_f$chr=="chr8","norm_cov"]
EB8_chr8 = EB8_new[EB8_new$chr=="chr8",]
load("~/Project/Aneuploidy/ModelwithLikelihood.RData")
load("~/Project/Aneuploidy/quantilenorm.RData")
EB8_new = read.table("VCF/processedVCF/EB8.out",sep="\t",header=F)
names(EB8) = c("chr","pos.hg19","Ref","Alt","Qual","filter","Genotype","Depth","ref_D","alt1_D","alt2_D")
head(EB8_new)
names(EB8_new) = c("chr","pos.hg19","Ref","Alt","Qual","filter","Genotype","Depth","ref_D","alt1_D","alt2_D")
head(EB8_new)
EB8_new = EB8_new[EB8$Genotype=="0/1",]
EB8_chr1 = EB8_new[EB8_new$chr=="chr1",]
dim(EB8_chr1)
head(EB8_chr1)
summary(EB8_chr1)
EB8_chr1 = EB8_f[EB8_f$chr=="chr1",]
EB8_chr1 = EB8_f[EB8_f$chr=="chr1"&EB8_f$Genotype=="0/1",]
quantile(EB8$Depth,c(0.05,0.95))
quantile(EB8$Depth,c(0.1,0.9))
EB8_new = read.table("VCF/processedVCF/EB8.out",sep="\t",header=F)
names(EB8) = c("chr","pos.hg19","Ref","Alt","Qual","filter","Genotype","Depth","ref_D","alt1_D","alt2_D")
names(EB8_new) = c("chr","pos.hg19","Ref","Alt","Qual","filter","Genotype","Depth","ref_D","alt1_D","alt2_D")
EB8_new = EB8_new[EB8_new$Depth<=333&EB8_new$Depth>=43,]
dim(EB8_new)
EB8_new = EB8_new[EB8_new$Depth<=333&EB8_new$Depth>=43&EB8_new$Genotype=="0/1",]
dim(EB8_new)
EB8_chr1 = EB8_new[EB8_new$chr=="chr1",]
save.image("~/Project/Aneuploidy/quantilenorm.RData")
N1 = norm_mean$chr8
CHR = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22")
norm_mean = as.data.frame(norm_mean)
names(norm_mean) = CHR
N1 = norm_mean$chr8
N2 = EB8_f[EB8_f$chr=="chr8","norm_cov"]
EB8_chr8 = EB8_new[EB8_new$chr=="chr8",]
dataList = creatDataList_Four(EB8_chr8,N1,N2)
source("Final_Function.R")
head(EB8_chr8)
names(EB8_new) = c("chr","pos.hg19","Ref","Alt","Qual","filter","Genotype","Depth","Ref_D","Alt_D","alt2_D")
EB8_chr8 = EB8_new[EB8_new$chr=="chr8",]
dataList = creatDataList_Four(EB8_chr8,N1,N2)
EB8_chr8[1:100,]
EB8_chr8[400:500,]
EB8_chr8[250:300,]
plotSites(EB8_chr8[1:300,],xlim=c(0,150000000))
plotSites(EB8_chr8[1:300,])
plotSites(EB8_chr8[1:300,],"test")
EB8_chr8[150:200,]
EB8_chr8[200:250,]
10018850-9911617
plot(EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D),col="blue",pch=20)
plot(EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D),col="blue",pch=20,ylim=c(0,1))
plot(EB8_chr8$pos.hg19,EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D),col="blue",pch=20,ylim=c(0,1))
tail(EB8_chr8)
plot(EB8_chr8$pos.hg19,EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D),col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB8_chr8$pos.hg19[1:300],EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D)[1:300],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
EB8_chr8$pos.hg19[1:300]
EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D)[1:300]
plot(EB8_chr8$pos.hg19[1:300],(EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D))[1:300],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB8_chr8$pos.hg19[1:200],(EB8_chr8$Alt_D/(EB8_chr8$Alt_D+EB8_chr8$Ref_D))[1:200],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
EB8_chr8[190:200,]
head(EB8_f)
N2 = EB8_f[EB8_f$chr=="chr8"&EB8_f$pos.hg19<=9153127,"norm_cov"]
dataList = creatDataList_Four(EB8_chr8[1:200,],N1,N2)
str(dataList)
?runModelFour
EB8_chr8_four = runModelFour(EB8_chr8[1:200,],N2,N1,checkConvergence = T)
head(EB8_chr8)
names(EB8_chr8)[1:2] = c("chr","position")
EB8_chr8_four = runModelFour(EB8_chr8[1:200,],N2,N1,checkConvergence = T)
require("rjags")
EB8_chr8_four = runModelFour(EB8_chr8[1:200,],N2,N1,checkConvergence = T)
EB8_chr8_normal = runModelOne(EB8_chr8[1:200,],N2,N1,checkConvergence = T)
EB8_chr8_normal$BIC
EB8_chr8_four$BIC
EB12_new = read.table("VCF/processedVCF/EB12.out",sep="\t",header=F)
names(EB12_new) = c("chr","position","Ref","Alt","Qual","filter","Genotype","Depth","Ref_D","Alt_D","alt2_D")
EB12_new = EB12_new[EB12_new$Depth<=208&EB12_new$Depth>=21&EB12_new$Genotype=="0/1",]
N1 = norm_mean$chr8
N2 = EB12_f[EB12_f$chr=="chr8","norm_cov"]
EB12_chr8 = EB12_new[EB12_new$chr=="chr8",]
plotSites(EB12_chr8,"chr8")
tail(EB12_chr8)
plot(EB12_chr8$pos.hg19[1:200],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:200],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB12_chr8$position[1:200],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:200],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB12_chr8$position[1:180],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:180],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB12_chr8$position[1:170],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:170],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB12_chr8$position[1:160],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:160],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
plot(EB12_chr8$position[1:162],(EB12_chr8$Alt_D/(EB12_chr8$Alt_D+EB12_chr8$Ref_D))[1:162],col="blue",pch=20,ylim=c(0,1),xlim=c(0,145750506))
EB12_chr8[162,]
EB12_chr8[163,]
EB12_chr8[164,]
EB12_chr8[165,]
EB12_chr8[161,]
N2 = EB12_f[EB12_f$chr=="chr8"&EB12_f$pos.hg19<=6802073,"norm_cov"]
runModelFour(EB12_chr8[1:161,],N2,N1,checkConvergence = T)
four = runModelFour(EB12_chr8[1:161,],N2,N1,checkConvergence = T)
one = runModelOne(EB12_chr8[1:161,],N2,N1,checkConvergence = T)
one$BIC
four$BIC
four
print(four)
require("MADSEQ/")
require("MADSEQ")
print(four)
?print.MadSeqOutput
print.MadSeqOutput(four)
plotFraction(four)
plotPosterior(four)
plotMixture(four)
tri = runModelTrisomy(EB12_chr8[1:161,],N2,N1,checkConvergence = T)
tri$BIC
four$BIC
one$BIC
plotFraction(tri)
mono = runModelMonosomy(EB12_chr8[1:161,],N2,N1,checkConvergence = T)
mono$BIC
tri$BIC
one$BIC
save.image("~/Project/Aneuploidy/quantileNorm.RData")
library(MADSEQ)
library(MADSEQ)
?print.MadSeqOutput
MADSEQ::print()
MADSEQ::print
load("~/Project/Aneuploidy/MADSEQ/Untitled.RData")
print(normal)
print.MadSeqOutput(normal)
rm(print.MadSeqOutput)
print(normal)
normal
print(normal)
require("MADSEQ")
print(normal)
?print.MadSeqOutput
?print.MadSeqOutput()
?as.MadSeqOutput
?runModelFour
library(MADSEQ)
?runModelFour
?mean
?mean()
?sum
require("MADSEQ")
?print.MadSeqOutput
?sum()
?sum
sum
sum()
?plot
load("~/Project/Aneuploidy/MADSEQ/Untitled.RData")
print(normal)
?plot
devtools::check()
require(MADSEQ)
require("MADSEQ")
library(MADSEQ)
?MadSeqOutput
?plot
devtools::check()
library(MADSEQ)
devtools::check()
devtools::check()
devtools::check()
devtools::document()
getwd()
?plot
?plot
library(MADSEQ)
?citation
library(MADSEQ)
library(MADSEQ)
devtools::check()
library(MADSEQ)
load("~/Project/Aneuploidy/MADSEQ/data/aneuploidy.RData")
aneuploidy
dim(aneuploidy)
rm(test2)
dat = read.table("../VCF/processedVCF/EB10.out",sep="\t")
head(dat)
head(tmp)
test = dat[dat[,1]=="chr15",]
test = dat[sample(500,1:2650),]
test
?sample
test = dat[sample(500,seq(1:2650)),]
test = dat[sample(seq(1:2650),500),]
head(Test)
head(test)
test = dat[dat[,1]=="chr15",]
test = test[sample(seq(1:2650),500),]
head(test)
table(test[,1])
head(tmp)
test = test[,c(1,2,9,10)]
head(Test)
head(test)
test = dat[dat[,1]=="chr15"&dat[,7]=="0/1",]
head(test)
test = test[sample(seq(1:1013),500),]
test
test = test[,c(1,2,9,10)]
head(test)
head(tmp)
names(test) = names(tmp)
head(test)
normalChrom = test
aneuploidyChrom = tmp
save(test,tmp,file="madDat.RData")
save(test,tmp,file="data/madDat.RData")
ls
devtools::create()
data(madDat)
rm(test)
rm(aneuploidy)
data(madDat)
head(aneuploidyChrom)
data(aneuploidy)
aneuploidyChrom = aneuploidy
save(normalChrom,aneuploidyChrom,file="data/madDat.RData")
rm(aneuploidyChrom)
rm(normalChrom)
data(madDat)
library(MADSEQ)
data(aneuploidy_sample)
aneuploidy_coverage
aneuploidy
rm(aneuploidy)
aneuploidy_coverage = tmp$Ref_D+tmp$Alt_D
genome_coverage
save(aneuploidyChrom,aneuploidy_coverage,genome_coverage,file="data//aneuploidyChrom.RData")
test = dat[dat[,1]=="chr15",]
head(test)
mean(test[,8])
normal_coverage = sample(test[,8],1000)
mean(normal_coverage)
save(normalChrom,normal_coverage,genome_coverage,file="data/normalChrom.RData")
library(MADSEQ)
?normalChrom
data(invalid)
dim(invalid)
library(MADSEQ)
devtools::check()
save(meiotic_trisomy,file="data/meiotic.RData")
library(MADSEQ)
devtools::check()
devtools::check(cleanup = F)
save(normalChrom,normal_coverage,file="data/normalChrom.RData")
library(MADSEQ)
devtools::check(cleanup = F)
library(MADSEQ)
library(MADSEQ)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
?print
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
data(meiotic)
meiotic = meiotic_trisomy
save(meiotic,"data/meiotic.RData")
save(meiotic,file="data/meiotic.RData")
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
save(meiotic_trisomy,file="data/meiotic_trisomy.RData")
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
save(meiotic_trisomy,file="data//meiotic_trisomy.RData",compress="xz")
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::use_package("rjags")
devtools::check(cleanup = F)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check(,cleanup = F)
devtools::check(,cleanup = F)
?as.list
base::list
devtools::check(,cleanup = F)
devtools::check(,cleanup = F)
attr()
attr
attributes(meiotic)
devtools::check()
devtools::check(cleanup = F)
devtools::check(cleanup = F)
devtools::check(cleanup = F)
?list
devtools::document()
devtools::document()
devtools::install_deps(dependencies = TRUE)
summary
summary.default
summary.factor
summary.data.frame
require("rjags")
methods()
methods("list")
list.dirs
list.samplers
list.factories
pdflatex -v
library(MADSEQ)
functions_in_code
library(MADSEQ)
devtools::test()
check_doc("MADSEQ")
require("Rd2roxygen")
Sys.which("pdflatex")
Sys.getenv("PATH")
devtools::check_doc()
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.getenv(“PATH”)
Sys.getenv("PATH")
devtools::document()
library(MADSEQ)
devtools::document()
data(aneuploidyChrom)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage, control_coverage = genome_coverage, checkConvergence=T,plot=T)
library(MADSEQ)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T)
require("rjags")
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T)
devtools::document()
devtools::use_package("coda")
devtools::document()
library(MADSEQ)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T)
print(normal)
monosomy = runModelMonosomy(data=aneuploidy, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
monosomy = runModelMonosomy(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
print(monosomy)
mitotic_trisomy = runModelTrisomy(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
mitotic_trisomy
meiotic_trisomy = runModelFour(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
print(meiotic_trisomy)
load("~/Project/Aneuploidy/MadSeqtest.RData")
meiotic_trisomy = runModelFour(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
meiotic_trisomy
aneuploidyChrom = aneuploidy
meiotic_trisomy = runModelFour(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
meiotic_trisomy
save(aneuploidyChrom,aneuploidy_coverage,genome_coverage,file="data//aneuploidyChrom.RData")
library(MADSEQ)
file.exists("~/.ssh/id_rsa.pub")
require("MADSEQ")
?runModelFour
?install.packages
library(MADSEQ)
getwd()
setwd("~/Project/Aneuploidy")
options(stringsAsFactors=F)
require("MASS")
require("preprocessCore")
NAME_DP = c("chr","pos","Depth")
chr_name =c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20",
"chr21","chr22")
#-----------------------------
ids = read.table("1000G/exome/batch2/list.txt",header=F,sep="\t")
ids = ids[,1]
#---------------read in the DP file in a loop---------------------
# from the DP file, the longest one has 373124 sites
max = 24275
coverage = NULL
id_length = NULL
for (i in ids){
#print(i)
tmp_DP = read.table(paste("1000G/exome//batch2/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
tmp_cov = tmp_DP[,"Depth"]
id_length = c(id_length,length(tmp_cov))
tmp_fit = fitdistr(tmp_cov,"negative binomial",lower=0.001)
tmp_cov = c(tmp_cov,rnbinom(max-length(tmp_cov),size=tmp_fit$estimate[1],mu=tmp_fit$estimate[2]))
coverage = cbind(coverage,tmp_cov)
}
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch2/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
tmp_cov = tmp_DP[,"Depth"]
id_length = c(id_length,length(tmp_cov))
tmp_fit = fitdistr(tmp_cov,"negative binomial",lower=0.001)
tmp_cov = c(tmp_cov,rnbinom(max-length(tmp_cov),size=tmp_fit$estimate[1],mu=tmp_fit$estimate[2]))
coverage = cbind(coverage,tmp_cov)
}
max = 36481
coverage = NULL
id_length = NULL
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch2/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
tmp_cov = tmp_DP[,"Depth"]
id_length = c(id_length,length(tmp_cov))
tmp_fit = fitdistr(tmp_cov,"negative binomial",lower=0.001)
tmp_cov = c(tmp_cov,rnbinom(max-length(tmp_cov),size=tmp_fit$estimate[1],mu=tmp_fit$estimate[2]))
coverage = cbind(coverage,tmp_cov)
}
coverage = coverage[1:max(id_length),]
norm_cov = normalize.quantiles(coverage,copy=T)
norm_cov = round(norm_cov)
colnames(norm_cov) = ids
colnames(coverage) = ids
names(id_length) = ids
coverage_chr = NULL
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch2/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
if(nrow(tmp_DP)==id_length[i]) tmp_DP = cbind(tmp_DP,normed_cov = norm_cov[1:id_length[i],i])
else print("error")
tmp_chr_cov = NULL
for (i in 1:22){
tmp_chr = tmp_DP[tmp_DP$chr==i,]
tmp_chr_cov = c(tmp_chr_cov,mean(tmp_chr[,"normed_cov"]))
}
coverage_chr = rbind(coverage_chr,tmp_chr_cov)
}
colnames(coverage_chr) = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20",
"chr21","chr22")
rownames(coverage_chr) = ids
quartz(w=12,h=8)
plot(x=1:22,y=rep(1,22),type="n",xlab="chromosome",xaxt="n",ylab="coverage",main="coverage quantile normalized",ylim=c(40,120))
axis(1,at=seq(1:22),labels=chr_name,las=2)
for (i in ids){
points(x=1:22,y=coverage_chr[i,],pch=20,type="o",col=sample(colors(),1),lwd=0.5)
}
abline(h=mean(coverage_chr),col="red",lty=2,lwd=3)
lines(1:22,apply(coverage_chr,2,median),pch=16,col="red",type="o",lwd=2)
median_cov = apply(coverage_chr,2,median)
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch2/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
if(nrow(tmp_DP)==id_length[i]){
tmp_DP = cbind(tmp_DP,normed_cov = norm_cov[1:id_length[i],i])
write.table(tmp_DP,file=paste("1000G/exome//batch2/processed/",i,".normed.DP",sep=""),quote=F,row.names=F,col.names = F)
}
else print("error")
}
median_cov
