createDataFile(paste("./one/",seed,".txt",sep=""),dataList)
source("Simulate_Data.R")
createDataFile(paste("./one/",seed,".txt",sep=""),dataList)
data = generateData_Cov_Out(nSNP=3000,
nCov=2000,
coverage=30,
vartom=20,
m=0.47,
fraction=fraction,
type=type,
noise=0.01)
dataList = generateDataList_new(data,type="one")
dataList
str(dataLIst)
str(dataList)
str(dataList)
require("rjags")
load.module("mix")
source("Simulate_Data.R")
options(stringsAsFactors = F)
data = generateData_Cov_Out(nSNP=3000,
nCov=2000,
coverage=30,
vartom=20,
m=0.47,
fraction=fraction,
type=type,
noise=0.01)
dataList = generateDataList_new(data,type="one")
str
str(dataList)
plot(1:data$nSNP,data$z/data$N,ylim=c(0,1),pch=20,cex=0.2,col=rgb(1,0,0,0.1))
filter = which(data$z/data$N==0.5)
plot(1:data$nSNP,data$z/data$N,ylim=c(0,1),pch=20,cex=0.8)
plot(1:data$nSNP,data$z/data$N,ylim=c(0,1),pch=20,cex=0.6)
keep = which(data$z/data$N!=0.5)
data_f = data
data_f$nSNP = length(keep)
data_f$z = data$z[keep]
data_f$N = data$N[keep]
plot(1:data_f$nSNP,data_f$z/data_f$N,ylim=c(0,1),pch=20,cex=0.6)
data = data_f
plot(1:data$nSNP,data$z/data$N,ylim=c(0,1),pch=20,cex=0.3)
dataList = generateDataList_new(data,type="one")
createDataFile(paste("./one/",seed,".txt",sep=""),dataList)
adaptSteps = 1500              # Number of steps to "tune" the samplers.
burnInSteps = 1500            # Number of steps to "burn-in" the samplers.
nChains = 1                   # Number of chains to run.
numSavedSteps=2000           # Total number of steps in chains to save.
thinSteps=2                  # Number of steps to "thin" (1=keep every step).
nIter = ceiling( ( numSavedSteps * thinSteps ) / nChains )
jagsModel_one = jags.model( "model/OneMix.txt", data=dataList,n.chains=nChains , n.adapt=adaptSteps )
data = generateData_Cov_Out(nSNP=500,
nCov=400,
coverage=30,
vartom=20,
m=0.47,
fraction=fraction,
type=type,
noise=0.01)
keep = which(data$z/data$N!=0.5)
data_f = data
data_f$nSNP = length(keep)
data_f$z = data$z[keep]
data_f$N = data$N[keep]
data = data_f
plot(1:data$nSNP,data$z/data$N,ylim=c(0,1),pch=20,cex=0.3)
dataList = generateDataList_new(data,type="one")
createDataFile(paste("./one/",seed,".txt",sep=""),dataList)
jagsModel_one = jags.model( "model/OneMix.txt", data=dataList,n.chains=nChains , n.adapt=adaptSteps )
update( jagsModel_one , n.iter=burnInSteps )
source("modified_MadSeq.R")
modified_MadSeq
runMadSeq()
runMadSeq_modify
detach("package:MADSEQ", unload=TRUE)
require("rjags")
load.module("mix")
source("Simulate_Data.R")
source("runMadSeq_Helper.R")
source("modified_MadSeq.R")
options(stringsAsFactors = F)
jagsModel_one = jags.model( "model/OneMix.txt", data=dataList,n.chains=nChains , n.adapt=adaptSteps )
update( jagsModel_one , n.iter=burnInSteps )
codaSamples_one = coda.samples( jagsModel_one , variable.names=parameters_one , n.iter=nIter , thin=thinSteps )
parameters_four = c("p_cov","m_cov","r_cov","mu","kappa","f","p1","p2","p3","p4","p5")
parameters_two = c("p_cov","m_cov","r_cov","mu","kappa","f","p1","p2","p3")
parameters_one = c("kappa","p_cov","r_cov","mu","p1","p2")
record_one = c("kappa","p_cov","r_cov","mu","m_cov")
record_two = c("f","kappa","mu[1]","mu[2]","p_cov","r_cov","m_cov")
record_four = c("f","kappa","mu[1]","mu[2]","mu[3]","mu[4]","p_cov","r_cov","m_cov")
codaSamples_one = coda.samples( jagsModel_one , variable.names=parameters_one , n.iter=nIter , thin=thinSteps )
parameters_one = c("kappa","p_cov","r_cov","mu","m_cov")
record_one = c("kappa","p_cov","r_cov","mu","m_cov")
record_two = c("f","kappa","mu[1]","mu[2]","p_cov","r_cov","m_cov")
record_four = c("f","kappa","mu[1]","mu[2]","mu[3]","mu[4]","p_cov","r_cov","m_cov")
codaSamples_one = coda.samples( jagsModel_one , variable.names=parameters_one , n.iter=nIter , thin=thinSteps )
one = as.matrix(codaSamples_one)
head(one)
parameters_four = c("p_cov","m_cov","r_cov","mu","kappa","f","p")
parameters_two = c("p_cov","m_cov","r_cov","mu","kappa","f")
parameters_one = c("kappa","p_cov","r_cov","mu","m_cov")
one = as.matrix(codaSamples_one)
saveRDS(one,file = paste("./one/",seed,".RDS",sep=""))
dataList = generateDataList_new(test,type="two")
dataList = generateDataList_new(data,type="two")
str(dataList)
dataList$mixture
jagsModel_mono = jags.model( "TwoMixMonosomy.txt" , data=dataList ,n.chains=nChains , n.adapt=adaptSteps )
jagsModel_mono = jags.model( "model/TwoMixMonosomy.txt" , data=dataList ,n.chains=nChains , n.adapt=adaptSteps )
5099056+98029+185403
setwd("/Volumes/data/Project/Aneuploidy/MADSEQ")
setwd("/Volumes/home/ykong/RepetitiveElement/Genentech/ref/GENCODEV26_Basic")
library("rmarkdown")
library("knitr")
library("ggplot2")
library("reshape2")
library("RColorBrewer")
library("plotrix")
library("biomaRt")
library("scales")
library("dplyr")
library("GenomicRanges")
options(stringsAsFactors = F)
# cds
cds = readRDS("gencode.v26.basic.annotation.cdss.gr.RDS")
# 3UTR
UTR3 = readRDS("gencode.v26.basic.annotation.UTR3s_removeCDS.gr.RDS")
# 5UTR
UTR5 = readRDS("gencode.v26.basic.annotation.UTR5s_removeCDS_3UTR.gr.RDS")
# intron
intron = readRDS("gencode.v26.basic.annotation.intron.gr.RDS")
# intergenic
intergenic = readRDS("gencode.v26.basic.annotation.intergenic.gr.RDS")
# hg38
hg38 = readRDS("hg38_gr.RDS")
# exon: exon is the sum of CDS+3UTR+5UTR+non_coding_gene
exon = readRDS("gencode.v26.basic.annotation.exons.gr.RDS")
############### plot
genomic_bp = readRDS(file="genomic_bp_GENCODEV26.RDS")
genomic_bp_to_plot = readRDS(file="genomic_bp_to_plot.RDS")
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
cols = brewer.pal(8,"Paired")[-c(5,6)]
names(cols) = c("noncoding_gene","CDS","5UTR","3UTR","intron","intergenic")
g_genomic = ggplot(genomic_bp_to_plot,aes(x="",y=bp,fill=feature)) + geom_bar(width=1,stat = "identity") + coord_polar("y",start=0)
g_genomic = g_genomic + labs(y="proportion",x="",title="Distribution of Genomic Feature (Gencode.V26.Basic)")
g_genomic = g_genomic + scale_fill_manual(values=cols)
g_genomic = g_genomic + blank_theme + theme(axis.text.x=element_blank())
g_genomic = g_genomic + geom_text(data=genomic_bp_to_plot[c(1,3),],aes(y =c(3029585336,3071239192)),
label =c("1.1%","1.1%"), size=4,nudge_x=0.2,angle=75)
g_genomic = g_genomic + geom_text(data=genomic_bp_to_plot[4:5,],aes(y =c(780340494,2270521971)),
label =c("45.9%","50.1%"), size=4)
g_genomic = g_genomic + geom_text(data=genomic_bp_to_plot[c(2,4),],aes(y =c(15913912,3050585938)),
label =c("1.0%","0.2%"), nudge_x=0.4,size=4,angle=75)
g_genomic
# pdf("plot/Gencode_Distribution_Pie.pdf",width=8,height=8)
# g_genomic
# dev.off()
rmsk_gr = readRDS(file="rmsk_stdchr_hg38_RE_ov_gr.RDS")
###### 1.  absolute proportion in bp
print("Plot the absolute proportion of genomic distribution of each repClass in bp")
rmsk_tbl = tbl_df(as.data.frame(rmsk_gr))
cds_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_CDS==T) %>% group_by(repClass) %>% summarise(cds_size = sum(ov_CDS_size))
UTR3_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_3UTR==T) %>% group_by(repClass) %>% summarise(UTR3_size = sum(ov_UTR3_size))
UTR5_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_5UTR==T) %>% group_by(repClass) %>% summarise(UTR5_size = sum(ov_UTR5_size))
noncoding_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_noncoding==T) %>% group_by(repClass) %>% summarise(noncoding_size = sum(ov_noncoding_size))
intron_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_intron==T) %>% group_by(repClass) %>% summarise(intron_size = sum(ov_intron_size))
intergenic_repClass_base_rollup =  rmsk_tbl %>% filter(ov_with_intergenic==T) %>% group_by(repClass) %>% summarise(intergenic_size = sum(ov_intergenic_size))
overlap_repClass = left_join(intergenic_repClass_base_rollup,intron_repClass_base_rollup)
overlap_repClass = left_join(overlap_repClass,noncoding_repClass_base_rollup)
overlap_repClass = left_join(overlap_repClass,UTR5_repClass_base_rollup)
overlap_repClass = left_join(overlap_repClass,UTR3_repClass_base_rollup)
overlap_repClass = left_join(overlap_repClass,cds_repClass_base_rollup)
overlap_repClass = as.data.frame(overlap_repClass)
overlap_repClass = as.data.frame(t(apply(overlap_repClass,1,function(x)ifelse(is.na(x),0,x))))
repClass = overlap_repClass$repClass
overlap_repClass$repClass = NULL
overlap_repClass = apply(overlap_repClass,2,as.numeric)
rownames(overlap_repClass) = repClass
repClass_total_bp = rmsk_tbl %>% group_by(repClass) %>% summarise(total_bp = sum(width))
overlap_proportion_repClass = apply(overlap_repClass,2,function(x)as.numeric(x)/repClass_total_bp$total_bp)
dat_bp = data.frame(repClass = rownames(overlap_repClass),overlap_proportion_repClass)
colnames(dat_bp) = c("repClass","intergenic","intron","noncoding_gene","5UTR","3UTR","CDS")
dat_bp_melt = melt(dat_bp)
### plot proportion
g = ggplot(dat_bp_melt,aes(x=variable,y=value,fill=variable)) + geom_bar(stat = "identity",position="dodge") + facet_grid(~repClass,switch = "x")
g = g + labs(x="repClass",y="Proportion",title="Absolute Distribution of RE in Genomic Feature (GENCODE.V26.Basic, unit = bp)")
g = g + scale_fill_manual(values=cols)
g = g + theme_bw() + theme(legend.position = "bottom",
axis.title = element_text(size=12,colour="black",face = "bold"),
axis.text = element_text(size=12,colour="black",angle=0),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
title = element_text(size=12,colour="black",face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "grey", fill = NA, size = 0.6,linetype=3),
axis.line = element_line(color = 'black',size = 0.3),
strip.text = element_text(size=12,colour="black",angle=60,vjust=1,hjust=0.5),
strip.background = element_blank(),
strip.placement = "outside")
g
pdf(file="plot/Gencode_Absolute_Distribution_Bar.pdf",width=16,h=8)
g
dev.off()
repClass_total_bp
overlap_proportion_repClass
head(dat_bp)
saveRDS(dat_bp,file="repClass_genomic_fraction.RDS")
target = "Target_hs37.bed"
setwd("/Volumes/data/Columbia")
ID = "fetal0190F"
bam = paste0(ID,".bam")
print(ID)
fetal0190F_cov = prepareCoverageGC(target,bam,genome_assembly = "BSgenome.Hsapiens.1000genomes.hs37d5")
options(stringsAsFactors = F)
options(stringsAsFactors = F)
library("MADSEQ")
library("BSgenome")
library("BSgenome.Hsapiens.1000genomes.hs37d5")
target = "Target_hs37.bed"
ID = "fetal0190F"
bam = paste0(ID,".bam")
print(ID)
fetal0190F_cov = prepareCoverageGC(target,bam,genome_assembly = "BSgenome.Hsapiens.1000genomes.hs37d5")
fetal0190F_cov
target = "/Volumes/home/ykong/ref/hs37d5/hs37d5.50k.bed"
fetal0190F_cov2 = prepareCoverageGC(target,bam,genome_assembly = "BSgenome.Hsapiens.1000genomes.hs37d5")
fetal0190F_cov2
fetal0190F_cov
prepareCoverageGC
range = fetal0190F_cov2[1]
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
library(GenomicRanges)
library(GenomicFeatures)
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
??ScanBamParam
library(Rsamtools)
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
sub_alignment = readGAlignments(bam,param=param)
??readGAlignments
library(GenomicAlignments)
sub_alignment = readGAlignments(bam,param=param)
sub_alignment
cov = GenomicAlignments::coverage(sub_alignment)
cov
?coverage
a = cov
range = fetal0190F_cov[1]
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
sub_alignment = readGAlignments(bam,param=param)
cov = GenomicAlignments::coverage(sub_alignment)
cov
cov[range]
a[range]
a
cov
fetal0190F_cov
cov1 = cov[range]
head(cov1)
mean(cov1)
range(cov)
?coverage
a$`1`
test = a$`1`
test
?RleList
?Rle
runLength(test)
start(test)
runValues(test)
runValue(test)
x = runValue(test)
x
summary(x)
mean(x)
a = cov[a]
a = a[range]
mean(a)
a
mean(runValue(a))
mean(runValue(a$`1`))
fetal0190F_cov
a
a=a$`1`
a
cov.
cov
cov[range]
range
range = fetal0190F_cov2[1]
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
sub_alignment = readGAlignments(bam,param=param)
cov = GenomicAlignments::coverage(sub_alignment)
a = cov[range]
a
cov
mean(runValue(a))
mean(runValue(cov))
fetal0190F_cov2
range = fetal0190F_cov2[1:10]
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range,
mapqFilter=1)
sub_alignment = readGAlignments(bam,param=param)
cov = GenomicAlignments::coverage(sub_alignment)
cov
cov = cov[range]
cov
sub_alignment
round(mean(cov))
cov$`1`
runValue(cov$`1`)
cov[[1]]
runValue(cov[[1]])
runValue(cov[[2]])
mean(runValue(cov[[1]]))
mean(runValue(cov[[2]]))
cov
mean(runValue(cov))
getwd()
bam
cov
a = cov[[1]]
a
mean(a)
a
b = a[a>0]
b
mean(b)
fetal0190F_cov2
summary(mcols(fetal0190F_cov2)$depth)
fetal0190F_cov
fetal0190F_cov
fetal0190F_cov2
window_50k = fetal0190F_cov2
window_50k
mcols(window_50k)=NULL
window_50k
ov = findOverlaps(window_50k,fetal0190F_cov)
ov
fetal0190F_cov[subjectHits(ov)[which(queryHits(ov)==1)]]
sum(mcols(fetal0190F_cov[subjectHits(ov)[which(queryHits(ov)==1)]])$depth)
cov_roll = sapply(unique(queryHits(ov)),function(x)sum(mcols(fetal0190F_cov[subjectHits(ov)[which(queryHits(ov)==x)]])$depth))
length(unique(queryHits(ov)))
unique(queryHits(ov))[1:10]
cov_roll = sapply(unique(queryHits(ov))[1:10],function(x)sum(mcols(fetal0190F_cov[subjectHits(ov)[which(queryHits(ov)==x)]])$depth))
cov_roll
tbl = tbl_df(as.data.frame(fetal0190F_cov))
tbl
length(unique(subjectHits(ov)))
which(duplicated(subjectHits(ov)))
ov[151]
ov[which(subjectHits(ov)==150)]
fetal0190F_cov[150]
?findOverlap
?findOverlaps
tbl
ov
x = data.frame(window=queryHits(ov),hit=subjectHits(ov),depth=tbl$depth[subjectHits(ov)])
head(x)
x = tbl_df(data.frame(window=queryHits(ov),hit=subjectHits(ov),depth=tbl$depth[subjectHits(ov)]))
cov_roll = x %>% group_by(window) %>% summarise(rollup_cov=sum(depth),
n = n())
cov_roll
cov2 = rep(0,length(window_50k))
cov2[cov_roll$window] = cov_roll$rollup_cov
head(cov2)
sum(cov2==0)
window_50k
mcols(cov_roll_gr)$depth = cov2
fetal0071F_cov = readRDS("RDS/fetal0071F_cov_gc.RDS")
fetal0127_cov = readRDS("RDS/fetal0127_cov_gc.RDS")
fetal0138_cov = readRDS("RDS/fetal0138_cov_gc.RDS")
fetal0190F_cov = readRDS("RDS/fetal0190F_cov_gc.RDS")
fetal0190F_cov = readRDS("RDS/fetal0190F_cov_gc.RDS")
normalizeCoverage(fetal0071F_cov,fetal0127_cov,fetal0138_cov,fetal0190F_cov,fetal0190F_cov)
cov = read.table("fetal0190F_cov_normed_depth.txt",sep="\t",header=T)
head(cov)
sum(cov$seqnames==1)
hetero = "fetal0190F.filtered.target.deinfo.recode.vcf.gz_filtered_heterozygous.txt"
cov = "fetal0190F_cov_normed_depth.txt"
runMadSeq
coverage = cov
cov = read.table(coverage, header = TRUE, sep = "\t")
target_chr = 1
target_cov = cov[cov$seqnames == target_chr, ]
data_coverage = target_cov$normed_depth
data_width = sum(width(IRanges(start = target_cov$start,
end = target_cov$end)))
control_coverage = mean(target_cov$ref_depth, na.rm = TRUE)
sample = strsplit(coverage, "_")[[1]][1]
auto_cov = cov[cov$seqnames != "chrX" & cov$seqnames !=
"chrY" & cov$seqnames != "X" & cov$seqnames != "Y",
]
auto_cov_mean = mean(auto_cov$ref_depth, na.rm = TRUE)
control_coverage
length( data_coverage)
summary( data_coverage)
AAF = read.table(hetero, header = TRUE, sep = "\t")
target_AAF = AAF[AAF$seqnames == target_chr, ]
x = data_coverage[sample(data_coverage,nmrow(target_AAF))]
x = data_coverage[sample(data_coverage,nrow(target_AAF))]
summary(x)
x = data_coverage[sample(data_coverage,nrow(target_AAF))]
summary(x)
x = data_coverage[sample(data_coverage,nrow(target_AAF))]
summary(x)
x = data_coverage[sample(data_coverage,nrow(target_AAF))]
summary(x)
data_coverage = data_coverage[sample(data_coverage,nrow(target_AAF))]
checkConvergence = F
adapt = 1000
burnin = 1000
nChain = 2
nStep = 2
thinSteps = 2
nStep = 2000
normal = MADSEQ:::runNormal(target_AAF, data_coverage, control_coverage,
checkConvergence = checkConvergence, adapt = adapt, burnin = burnin,
nChain = nChain, nStep = nStep, thinSteps = thinSteps)
target_chr = 19
target_cov = cov[cov$seqnames == target_chr, ]
data_coverage = target_cov$normed_depth
data_width = sum(width(IRanges(start = target_cov$start,
end = target_cov$end)))
control_coverage = mean(target_cov$ref_depth, na.rm = TRUE)
sample = strsplit(coverage, "_")[[1]][1]
auto_cov = cov[cov$seqnames != "chrX" & cov$seqnames !=
"chrY" & cov$seqnames != "X" & cov$seqnames != "Y",
]
auto_cov_mean = mean(auto_cov$ref_depth, na.rm = TRUE)
AAF = read.table(hetero, header = TRUE, sep = "\t")
target_AAF = AAF[AAF$seqnames == target_chr, ]
head(target_AAF)
summary(data_coverage)
length(data_coverage)
control_coverage
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
summary(sample(data_coverage,nrow(target_AAF)))
data_coverage = summary(sample(data_coverage,nrow(target_AAF)))
normal = MADSEQ:::runNormal(target_AAF, data_coverage, control_coverage,
checkConvergence = checkConvergence, adapt = adapt, burnin = burnin,
nChain = nChain, nStep = nStep, thinSteps = thinSteps)
data_coverage = sample(data_coverage,nrow(target_AAF))
data_coverage = target_cov$normed_depth
data_coverage = target_cov$normed_depth
data_coverage = sample(data_coverage,nrow(target_AAF))
summary(data_coverage)
control_coverage
normal = MADSEQ:::runNormal(target_AAF, data_coverage, control_coverage,
checkConvergence = checkConvergence, adapt = adapt, burnin = burnin,
nChain = nChain, nStep = nStep, thinSteps = thinSteps)
monosomy = MADSEQ:::runMonosomy(target_AAF, data_coverage, control_coverage,
checkConvergence = checkConvergence, adapt = adapt, burnin = burnin,
nChain = nChain, nStep = nStep, thinSteps = thinSteps)
mitotic_trisomy = MADSEQ:::runMitoticTrisomy(target_AAF, data_coverage,
control_coverage, checkConvergence = checkConvergence,
adapt = adapt, burnin = burnin, nChain = nChain, nStep = nStep,
thinSteps = thinSteps)
meiotic_trisomy = MADSEQ:::runMeioticTrisomy(target_AAF, data_coverage,
control_coverage, checkConvergence = checkConvergence,
adapt = adapt, burnin = burnin, nChain = nChain, nStep = nStep,
thinSteps = thinSteps)
LOH = MADSEQ:::runLOH(target_AAF, data_coverage, control_coverage,
checkConvergence = checkConvergence, adapt = adapt, burnin = burnin,
nChain = nChain, nStep = nStep, thinSteps = thinSteps)
BIC = c(normal[[2]], monosomy[[2]], mitotic_trisomy[[2]],
meiotic_trisomy[[2]], LOH[[2]])
BIC = c(BIC[1], BIC[2:5])
BIC = sort(BIC, decreasing = FALSE)
best_model = names(which.min(BIC))
selected = substr(best_model, 5, nchar(best_model))
cat("Order and delta BIC of the preference of models\n")
delta_BIC = BIC - min(BIC)
print(delta_BIC)
cat(paste("model selected:", selected))
