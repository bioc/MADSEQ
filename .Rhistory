contains = "GRanges",
validity = .valid.CovGCRanges)
CovGCRanges = setClass("CovGCRanges",
representation = representation(
depth = "numeric",
GC = "numeric" )
contains = "GRanges")
CovGCRanges = setClass("CovGCRanges",
representation = representation(
depth = "numeric",
GC = "numeric"),
contains = "GRanges")
new("CovGCRanges",test2,depth=test3$depth,GC=test3$GC)
new("CovGCRanges",test2,depth=test3$depth,x=test3$GC)
CovGCRanges = setClass("CovGCRanges",
representation = representation(
depth = "numeric",
GC = "numeric"),
contains = "GRanges",
validity = .valid.CovGCRanges)
new("CovGCRanges",test2,depth=test3$depth,GC=test3$GC)
new("CovGCRanges",test2,depth=test3$depth,GC=test3$GC)
new("CovGCRanges",test2,depth=test3$depth,GC = test3$GC)
.valid.CovGCRanges = function(object){
if(any(object@GC>1)|any(object@GC<0))
"GC content must <=1 and >=0"
}
CovGCRanges = setClass("CovGCRanges",
representation = representation(
depth = "numeric",
GC = "numeric"),
contains = "GRanges",
validity = .valid.CovGCRanges)
new("CovGCRanges",test2,depth=test3$depth,GC = test3$GC)
test2
?as
seqnames(test2)
a = CovGCRanges(seqnames=seqnames(test2),ranges=ranges(test2),depth=mcols(test2)$depth,GC=mcols(test)@GC)
a = CovGCRanges(seqnames=seqnames(test2),ranges=ranges(test2),depth=mcols(test2)$depth,GC=mcols(test)$GC)
ranges(test2)
test2
test2 = new("CovGCRanges",test2,depth=mcols(test2)$depth,GC=mcols(test2)$GC)
test2
devtools::document()
require("VGAM")
devtools::document()
devtools::document()
library(MADSEQ)
library(MADSEQ)
x = sample(1:79292,size=1000)
x
x = sort(x)
s
x
write.table(x,"/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/index.txt",sep="\t",quote = F,row.names = F,col.names = F)
bed = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/test_target.bed"
EB9_bam = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/EB9.AD1E25ACXX.lane_8_PM_I3.hg19.alignment.bam"
EB12_bam = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/EB12.AD1E25ACXX.lane_8_PM_I7.hg19.alignment.bam"
EB9_cov = prepareCoverageGC(bed,EB9_bam,"hg19")
seq(1,1000,1000)
bed = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/target.bed"
EB9_cov = prepareCoverageGC(bed,EB9_bam,"hg19")
?getCoverage
prepareCoverageGC()
prepareCoverageGC
EB9_cov = prepareCoverageGC(bed,EB9_bam,"hg19")
warnings()
getCoverage = function(bam, target_bed, genome_assembly="hg19"){
## read in target bed table
target = read.table(target_bed,sep="\t",header=F)
## prepare GRanges object for input bed file
target_gr = GenomicRanges::GRanges(seqnames=Rle(target[,1]),
ranges=IRanges(start=target[,2]+1,
end=target[,3]),
strand=rep("*",nrow(target)))
#seqinfo = Seqinfo(genome=genome_assembly)[seqlevels(target_gr)]
#seqinfo(target_gr) = seqinfo
nRegion = length(target_gr)
cat(paste(nRegion, "regions from", length(seqlevels(target_gr)),
"chromosomes in the bed file.", sep=" "))
## use helper function to calculate average coverage for each region,
## in order to handle large bam files,
## process 1000 regions at a time to reduce memory usage
message("calculating depth from BAM...")
depth = NULL
for (i in seq(1,nRegion,1000)){
## report progress
if(i%%5000==1&i>1) cat(paste(i-1,"regions processed\n"))
end = ifelse(i+999>nRegion,nRegion,i+999)
sub_depth = calculateSubCoverage(target_gr[i:end],bam)
depth = c(depth, sub_depth)
}
## see if number of depth equals to number of regions
if (length(depth) == nRegion) mcols(target_gr)$depth = depth
else stop(paste("with", nRegion, "target regions, only",
length(depth), "processed. Please check your input.",
sep=" "))
target_gr
}
bed1 = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/test_target.bed"
x = getCoverage(EB9_bam,bed1)
calculateSubCoverage = function(range, bam){
## read bam file from given ranges,
## filter out duplicated reads, secondary reads and unmapped reads
param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isSecondaryAlignment=FALSE,
isDuplicate=FALSE),
which=range)
## read alignment
sub_alignment = readGAlignments(bam,param=param)
## calculate coverage
cov = coverage(sub_alignment)
cov = cov[range]
#print(cov)
## return average coverage for each region
round(mean(cov))
}
x = getCoverage(EB9_bam,bed1)
require("GenomicAlignments")
x = getCoverage(EB9_bam,bed1)
x
remove.packages("MADSEQ")
require("MADSEQ")
?install.packages
installed.packages()
require("MADSEQ")
remove.packages("MADSEQ")
library(MADSEQ)
library(MADSEQ)
EB7_bam = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/EB7.tmp.bam"
EB11_bam = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/EB11.tmp.bam"
bed = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/target_test.bed"
EB7_cov = prepareCoverageGC(bed,EB7_bam)
EB7_cov
EB11_cov = prepareCoverageGC(bed,EB11_bam)
norm = normalizeCoverage(EB11_cov,control=EB7_cov,writeToFile = F)
norm = normalizeCoverage(EB11_cov,control=EB7_cov,writeToFile = F)
EB11_vcf = "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/EB11.tmp.recode.vcf.gz"
EB11_AAF = prepareHetero(EB11_vcf,bed,writeToFile = F)
EB11_AAF
names(norm)
EB11_chr18 = runMadSeq(EB11_AAF,norm[[2]],"chr18")
EB7_cov = prepareCoverageGC(bed,EB7_bam)
EB7_cov
EB11_cov = prepareCoverageGC(bed,EB11_bam)
EB11_cov
norm = normalizeCoverage(EB11_cov,control=EB7_cov,writeToFile = F)
EB11_AAF = prepareHetero(EB11_vcf,bed,writeToFile = F)
EB11_AAF
EB11_chr18 = runMadSeq(EB11_AAF,norm[[2]],"chr18")
EB7_cov
EB11_cov
norm[[1]]
norm[[2]]
x = as.data.frame(norm[[1]])
y = as.data.frame(norm[[2]])
EB7_chr18 = x[x$seqnames=="chr18",]
EB11_chr18 = y[y$seqnames=="chr18",]
sum(EB11_chr18$normed_depth>EB7_chr18$normed_depth)
EB11_chr18
x = which(EB11_chr18$start==EB7_chr18$start)
x=match(EB7_chr18$start,EB11_chr18$start)
x
which(is.na(x))
EB7_chr18[122,]
EB11_chr18$start==73436201
sum(EB11_chr18$start==73436201)
EB7_chr18 = EB7_chr18[-122,]
x=match(EB7_chr18$start,EB11_chr18$start)
x
EB11_chr18 = EB11_chr18[x,]
sum(EB11_chr18$normed_depth>EB7_chr18$normed_depth)
x = EB11_chr18[EB11_chr18$normed_depth>EB7_chr18$normed_depth,]
y = EB7_chr18[EB11_chr18$normed_depth>EB7_chr18$normed_depth,]
all(x$start==y$start)
summary(x)
summary(y)
38/28
head(x)
write.table(x[,1:3], "/Volumes/home/ykong/Aneuploidy/EB7_EB12/bam/tmp.bed",sep="\t",quote = F,row.names = F,col.names = F)
EB7_cov = prepareCoverageGC(bed,EB7_bam)
EB11_cov = prepareCoverageGC(bed,EB11_bam)
norm = normalizeCoverage(EB11_cov,control=EB7_cov,writeToFile = F)
EB11_chr18 = runMadSeq(EB11_AAF,norm[[2]],"chr18")
EB11_AAF = prepareHetero(EB11_vcf,bed,writeToFile = F)
EB11_AAF
EB11_chr18 = runMadSeq(EB11_AAF,norm[[2]],"chr18")
EB11_vcf
EB11_AAF = prepareHetero(EB11_vcf,bed,writeToFile = F)
EB11_AAF
EB11_chr18 = runMadSeq(EB11_AAF,norm[[2]],"chr18")
EB11_chr18
plotMadSeq(EB11_chr18)
plotFraction(EB11_chr18)
plotMixture(EB11_chr18)
library(MADSEQ)
plotFraction(EB11_chr18)
library(MADSEQ)
plotFraction(EB11_chr18)
library(MADSEQ)
a = system.file("extadata","aneuploidy.bam",package="MADSEQ")
a
a
a = system.file("extdata","aneuploidy.bam",package="MADSEQ")
a
EB11_chr17 = runMadSeq(EB11_AAF,norm[[2]],"chr17")
library(MADSEQ)
EB11_chr17 = runMadSeq(EB11_AAF,norm[[2]],"chr17")
EB11_chr17
plotMadSeq(EB11_chr17)
plotMixture(EB11_chr17)
plotFraction(EB11_chr17)
library(MADSEQ)
plotFraction(EB11_chr17)
source("https://bioconductor.org/biocLite.R")
biocLite("SMITE")
library(SMITE)
library("SMITE")
biocLite("SMITE")
devtools::document()
?prepareCoverageGC
devtools::document()
devtools::document()
devtools::document()
?prepareCoverageGC
devtools::document()
?prepareCoverageGC
?MadSeq
devtools::document()
?prepareCoverageGC
?plot
devtools::document()
?prepareCoverageGC
?Granges
?GRanges
devtools::document()
?prepareCoverageGC
?prepareCoverageGC
devtools::document()
?prepareCoverageGC
devtools::document()
?normalizeCoverage
devtools::document()
?normalizeCoverage
system.file("extdata","aneuploidy.vcf.gz","MADSEQ")
system.file("extdata","aneuploidy.vcf.gz","MADSEQ")
system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
devtools::document()
?prepareHetero
devtools::document()
?prepareHetero
options(stringsAsFactors=F)
pop = read.table("pop.txt",sep="\t",header=F)[,1]
setwd("/Volumes/data/Project/Aneuploidy/MADSEQ")
pop = read.table("pop.txt",sep="\t",header=F)[,1]
setwd("/Volumes/data/Project/Aneuploidy/Loci_1000g/pop")
pop = read.table("pop.txt",sep="\t",header=F)[,1]
CLM = read.table("CLM.geno.012",sep="\t",header=F)
CLM = t(CLM)
CLM = CLM[-1,]
CLM = CLM[1:103246,]
CLM[1:10,]
CLM[1:10,1:10]
indiv1 = CLM[,1]
pos = read.table("ESN.geno.012.pos",sep="\t",header=F)
head(pos)
pos = pos[1:103246,]
tail(pos)
indiv1 = cbind(pos,indiv1)
head(indiv1)
test = indiv1[indiv1[,3]==1,]
head(test)
plot(test[test[,1]==1,2],runif(length(test[test[,1]==1,2])),pch=20)
library(MADSEQ)
library(MADSEQ)
?prepareCoverageGC
devtools::document()
?prepareCoverageGC
devtools::document()
devtools::document()
?runMadSeq
devtools::document()
?runMadSeq
devtools::document()
?runMadSeq
devtools::document()
?rjags
?"MADSEQ-package"
cite("rjags")
cite(rjags)
?citation
citation("rjags")
devtools::document()
?runMadSeq
?rjags
devtools::document()
?MADSEQ
devtools::document()
?"MadSeq"
?prepareHetero
require("BiocGenerics")
library(MADSEQ)
devtools::document()
library(MADSEQ)
?normalizeCoverage
library(MADSEQ)
library(MADSEQ)
library(MADSEQ)
?GRangesList
?length
?GRanges
?ScanBamParam
?coverage
?readGAlignments
?alphabetFrequency
?"BiocGenerics"
devtools::document()
devtools::document()
library(MADSEQ)
?prepareHetero
?runMadSeq
?library
?suppressMessages
?options
getwd()
?runMadSeq
library(MADSEQ)
library(MADSEQ)
devtools::document()
devtools::install_deps(dependencies = TRUE)
?deltaBIC
?prepareCoverageGC
library(MADSEQ)
?prepareCoverageGC
?deltaBIC
library(MADSEQ)
?methods
library("methods")
?methods
?`methods-package`
devtools::document()
devtools::document()
?MadSeq
?"MADSEQ-package"
devtools::document()
?"MADSEQ"
library(MADSEQ)
devtools::document()
?summary-method
?summary
library(MADSEQ)
library(MADSEQ)
?summary
?summary
devtools::document()
library(MADSEQ)
bam1 = system.file("extdata","aneuploidy.bam",package="MADSEQ")
bam2 = system.file("extdata","normal.bam",package="MADSEQ")
target = system.file("extdata","target.bed",package="MADSEQ")
vcf1 = system.file("extdata","aneuploidy.vcf",package="MADSEQ")
vcf1 = system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
aneuploidy_cov = prepareCoverageGC(target,bam1)
normal_cov = prepareCoverageGC(target,bam2)
normalizeCoverage(aneuploidy_cov,control=normal_cov,destination = "inst/extdata/")
prepareHetero(vcf1,target,destination = "inst/extdata/")
?prepareGenomeplot
?prepareGenomePlot
?quantsmooth
require("quantsmooth")
?quantsmooth
devtools::document()
library(MADSEQ)
?runMadSeq
aneuploidy_bam = system.file("extdata","aneuploidy.bam",package="MADSEQ")
normal_bam = system.file("extdata","normal.bam",package="MADSEQ")
aneuploidy_cov_gc = prepareCoverageGC(target,aneuploidy_bam,"hg19")
target = system.file("extdata","target.bed",package="MADSEQ")
aneuploidy_cov_gc = prepareCoverageGC(target,aneuploidy_bam,"hg19")
normal_cov_gc = prepareCoverageGC(target,normal_bam,"hg19")
normed = normalizeCoverage(aneuploidy_cov_gc,
#'                            control=normal_cov_gc,writeToFile=FALSE)
)
normed = normalizeCoverage(aneuploidy_cov_gc,control=normal_cov_gc,writeToFile=FALSE)
normed
names(normed)
aneuploidy_normed_cov = normed[["aneuploidy_cov_gc"]]
aneuploidy_chr18 = runMadSeq(aneuploidy_hetero, aneuploidy_normed_cov,target_chr="chr18")
aneuploidy_vcf = system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
aneuploidy_hetero = prepareHetero(aneuploidy_vcf, target, writeToFile=FALSE)
aneuploidy_chr18 = runMadSeq(aneuploidy_hetero, aneuploidy_normed_cov,target_chr="chr18")
target = "../tmp/tmp_target.bed"
aneuploidy_cov = prepareCoverageGC(target,aneuploidy_bam)
normal_cov = prepareCoverageGC(target,normal_bam)
normed = normalizeCoverage(aneuploidy_cov,control=normal_cov)
aneuploidy_vcf = "../tmp/tmp_aneuploidy.vcf.gz"
aneuploidy_hetero = prepareHetero(aneuploidy_vcf,target,"hg19",writeToFile = F)
aneuploidy_hetero
res = runMadSeq(aneuploidy_hetero,normed[["aneuploidy_cov"]])
res = runMadSeq(aneuploidy_hetero,normed[["aneuploidy_cov"]],"chr18")
normed = normalizeCoverage(aneuploidy_cov,control=normal_cov,writeToFile = F)
res = runMadSeq(aneuploidy_hetero,normed[["aneuploidy_cov"]],"chr18")
?"runMadSeq"
res = runMadSeq(aneuploidy_hetero,normed[["aneuploidy_cov"]],"chr18",nChain=1)
aneuploidy_vcf = system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
target = system.file("extdata","target.bed",package="MADSEQ")
aneuploidy_hetero = prepareHetero(aneuploidy_vcf, target, writeToFile=FALSE)
aneuploidy_bam = system.file("extdata","aneuploidy.bam",package="MADSEQ")
normal_bam = system.file("extdata","normal.bam",package="MADSEQ")
aneuploidy_cov_gc = prepareCoverageGC(target,aneuploidy_bam,"hg19")
normal_cov_gc = prepareCoverageGC(target,normal_bam,"hg19")
normed = normalizeCoverage(aneuploidy_cov_gc,
control=normal_cov_gc,writeToFile=FALSE)
aneuploidy_normed_cov = normed[["aneuploidy_cov_gc"]]
#' ## check chromosome18
aneuploidy_chr18 = runMadSeq(aneuploidy_hetero, aneuploidy_normed_cov,
target_chr="chr18",nChain =1)
target = system.file("extdata","target.bed",package="MADSEQ")
bam1 = "../tmp/aneuploidy1.bam"
bam2 = "../tmp/normal1.bam"
aneuploidy_vcf = "../tmp/tmp_aneuploidy.vcf.gz"
aneuploidy_cov = prepareCoverageGC(target,bam1)
normal_cov = prepareCoverageGC(target,bam2)
normed = normalizeCoverage(aneuploidy_cov,control=normal_cov,writeToFile = F)
aneuploidy_AAF = prepareHetero(aneuploidy_vcf,target,writeToFile = F)
aneuploidy_AAF = prepareHetero(aneuploidy_vcf,target,writeToFile = F)
res = runMadSeq(aneuploidy_AAF,normed[["aneuploidy_cov"]],nChain = 1)
res = runMadSeq(aneuploidy_AAF,normed[["aneuploidy_cov"]],nChain = 1,target_chr = "chr18")
res = runMadSeq(aneuploidy_AAF,normed[["aneuploidy_cov"]],nChain = 1,target_chr = "chr18",nStep = 5000,thinSteps=1)
res
res = runMadSeq(aneuploidy_AAF,normed[["aneuploidy_cov"]],nChain = 1,target_chr = "chr18",nStep = 5000,thinSteps=1,adapt=5000)
res
res = runMadSeq(aneuploidy_AAF,normed[["aneuploidy_cov"]],nChain = 1,target_chr = "chr18",nStep = 5000,thinSteps=1,adapt=5000,burnin=5000)
devtools::document()
library(MADSEQ)
curve(dbeta(x,1,1))
curve(dbeta(x,2,1))
curve(dbeta(x,2,2))
?dbeta
curve(dbeta(x=seq(0,1,0.01),2,2))
?curve
curve(x^3 - 3*x, -2, 2)
x=seq(0,1,0.01)
curve(x^3 - 3*x, -2, 2)
curve(dbeta(x=seq(0,1,0.01),2,2))
curve(dbeta(x,2,2))
x=seq(0,2,0.01)
curve(dbeta(x,2,2))
library(MADSEQ)
devtools::document()
devtools::document()
library(MADSEQ)
devtools::document()
devtools::document()
library(MADSEQ)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(MADSEQ)
sys.which("pdflatex")
Sys.which("pdflatex")
?vignetteEngine
?knitr
?"textConnection-class"\
?texi2dvi
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library("BiocCheck")
?summary
aneuploidy_vcf = system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
target = system.file("extdata","target.bed",package="MADSEQ")
aneuploidy_hetero = prepareHetero(aneuploidy_vcf, target, writeToFile=FALSE)
aneuploidy_bam = system.file("extdata","aneuploidy.bam",package="MADSEQ")
normal_bam = system.file("extdata","normal.bam",package="MADSEQ")
aneuploidy_cov_gc = prepareCoverageGC(target,aneuploidy_bam,"hg19")
normal_cov_gc = prepareCoverageGC(target,normal_bam,"hg19")
normed = normalizeCoverage(aneuploidy_cov_gc,
control=normal_cov_gc,writeToFile=FALSE)
aneuploidy_normed_cov = normed[["aneuploidy_cov_gc"]]
aneuploidy_chr18 = runMadSeq(aneuploidy_hetero, aneuploidy_normed_cov,
target_chr="chr18")
summary(aneuploidy_chr18)
save(aneuploidy_chr18,file="./data/aneuploidy_chr18.RData")
data("aneuploidy_chr18")
data("aneuploidy_chr18")
devtools::document()
devtools::document()
?aneuploidy_chr18
devtools::document()
devtools::document()
?aneuploidy_chr18
devtools::document()
?aneuploidy_chr18
devtools::document()
library(MADSEQ)
?predict
devtools::document()
?par
devtools::document()
warnings()
warnings()
warnings()
warnings()
devtools::document()
devtools::document()
?stats
?loess
?"BiocGenerics"
devtools::document()
library(MADSEQ)
devtools::document()
library(MADSEQ)
devtools::document()
devtools::document()
