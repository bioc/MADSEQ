tmp_cov = tmp_DP[,"Depth"]
id_length = c(id_length,length(tmp_cov))
#tmp_fit = fitdistr(tmp_cov,"negative binomial",lower=0.001)
tmp_cov = c(tmp_cov,sample(x=tmp_cov,size=max-length(tmp_cov),replace=T))
coverage = cbind(coverage,tmp_cov)
}
coverage = coverage[1:max(id_length),]
norm_cov = normalize.quantiles(coverage,copy=T)
norm_cov = round(norm_cov)
colnames(norm_cov) = ids
colnames(coverage) = ids
names(id_length) = ids
coverage_chr = NULL
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch456/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
if(nrow(tmp_DP)==id_length[i]) tmp_DP = cbind(tmp_DP,normed_cov = norm_cov[1:id_length[i],i])
else print("error")
tmp_chr_cov = NULL
for (i in 1:22){
tmp_chr = tmp_DP[tmp_DP$chr==i,]
tmp_chr_cov = c(tmp_chr_cov,mean(tmp_chr[,"normed_cov"]))
}
coverage_chr = rbind(coverage_chr,tmp_chr_cov)
}
colnames(coverage_chr) = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20",
"chr21","chr22")
rownames(coverage_chr) = ids
quartz(w=12,h=8)
plot(x=1:22,y=rep(1,22),type="n",xlab="chromosome",xaxt="n",ylab="coverage",main="coverage quantile normalized",ylim=c(40,120))
axis(1,at=seq(1:22),labels=chr_name,las=2)
for (i in ids){
points(x=1:22,y=coverage_chr[i,],pch=20,type="o",col=sample(colors(),1),lwd=0.5)
}
abline(h=mean(coverage_chr),col="red",lty=2,lwd=3)
lines(1:22,apply(coverage_chr,2,median),pch=16,col="red",type="o",lwd=2)
median_cov = apply(coverage_chr,2,median)
max(coverage_chr[,12])
match(max(coverage_chr[,12]),coverage_chr[,12])
coverage_chr[384,]
ids[384]
coverage_chr["HG02322",]
match(max(coverage_chr[-384,12]),coverage_chr[,12])
coverage_chr[221,]
ids[221]
match(min(coverage_chr[,13]),coverage_chr[,13])
ids[106]
median_cov
for (i in ids){
print(i)
tmp_DP = read.table(paste("1000G/exome//batch456/processed/",i,".DP",sep=""),sep="\t",header=F)
names(tmp_DP) = NAME_DP
tmp_DP = tmp_DP[tmp_DP$chr!="X"&tmp_DP$chr!="Y"&!is.na(tmp_DP$Depth)&tmp_DP$Depth<240,]
if(nrow(tmp_DP)==id_length[i]){
tmp_DP = cbind(tmp_DP,normed_cov = norm_cov[1:id_length[i],i])
write.table(tmp_DP,file=paste("1000G/exome//batch456/processed/",i,".normed.DP",sep=""),quote=F,row.names=F,col.names = F)
}
else print("error")
}
summary(coverage)
dataList = getData("1000G/exome/batch1/jags_file/HG00501//four/chr12.txt")
str(dataList)
0.99/3
0.33/2
?dbeta
1-0.165
0.165/0.835
165/5
835/5
m = 0.165
var = 0.00001
sqrt(var)
var = 0.0001
sqrt(var)
a = m^2(1-m)/var-m
a = m^2*(1-m)/var-m
a
b = m*(1-m)^2/var-m*(1-m)
b
curve(dbeta(x,a,b))
options(stringsAsFactors = F)
source("../../Final_Function.R")
NAME = c("chr","pos","Ref","Alt","Qual","Genotype","Ref_D","Alt_D","Depth")
setwd("~/Project/Aneuploidy/1000G")
source("../../Final_Function.R")
setwd("exome/")
source("../../Final_Function.R")
NAME = c("chr","pos","Ref","Alt","Qual","Genotype","Ref_D","Alt_D","Depth")
NAME_DP = c("chr","pos","Depth","normed_cov")
chr_name =c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20",
"chr21","chr22")
#-------------------------------
#----------------------- 1. HG01357 --------------------------
### AAF
HG01357 = read.table("batch456/processed/HG01357.hetero.txt",sep="\t",header=F)
HG01357 = read.table("batch3/processed/HG01357.hetero.txt",sep="\t",header=F)
names(HG01357) = NAME
HG01357_filter = HG01357[HG01357$Depth<248,]
HG01357_cut = quantile(HG01357_filter$Depth,c(0.1,0.9))
HG01357_filter = HG01357_filter[HG01357_filter$Ref_D>3&HG01357_filter$Alt_D>3,]
HG01357_filter = HG01357_filter[HG01357_filter$Depth>max(10,HG01357_cut[1])&HG01357_filter$Depth<min(240,HG01357_cut[2]),]
HG01357_filter = HG01357_filter[!(HG01357_filter$chr==6&HG01357_filter$pos>29000000&HG01357_filter$pos<35000000),]
HG01357_filter = HG01357_filter[!(HG01357_filter$chr==14&HG01357_filter$pos>105400000),]
quartz(w=16,h=8)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG01357 (Female, Han Chinese, LCL)")
x=500
mid_x = NULL
tail(HG01357_filter)
for (i in 1:23){
chr = i
if (i==23) chr="X"
tmp = HG01357_filter[HG01357_filter$chr==chr,]
col = ifelse(i%%2==1,"blue","cornflowerblue")
points(tmp$pos+x,tmp$Alt_D/(tmp$Alt_D+tmp$Ref_D),col=col,pch=20)
mid_x = c(mid_x,mean(tmp$pos+x))
x = max(tmp$pos+x)+40000000
}
axis(1,at=mid_x,labels=c(chr_name,"chrX"),las=2,lwd=2)
abline(h=mean(HG01357_filter$Alt_D/(HG01357_filter$Alt_D+HG01357_filter$Ref_D)),lwd=2,lty=2)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG01357 (Female, CLM, LCL)")
x=500
mid_x = NULL
for (i in 1:23){
chr = i
if (i==23) chr="X"
tmp = HG01357_filter[HG01357_filter$chr==chr,]
col = ifelse(i%%2==1,"blue","cornflowerblue")
points(tmp$pos+x,tmp$Alt_D/(tmp$Alt_D+tmp$Ref_D),col=col,pch=20)
mid_x = c(mid_x,mean(tmp$pos+x))
x = max(tmp$pos+x)+40000000
}
axis(1,at=mid_x,labels=c(chr_name,"chrX"),las=2,lwd=2)
abline(h=mean(HG01357_filter$Alt_D/(HG01357_filter$Alt_D+HG01357_filter$Ref_D)),lwd=2,lty=2)
HG00623 = read.table("batch2/processed/HG00623.hetero.txt",sep="\t",header=F)
names(HG00623) = NAME
HG00623_filter = HG00623[HG00623$Depth<248,]
HG00623_cut = quantile(HG00623_filter$Depth,c(0.1,0.9))
HG00623_filter = HG00623_filter[HG00623_filter$Ref_D>3&HG00623_filter$Alt_D>3,]
HG00623_filter = HG00623_filter[HG00623_filter$Depth>max(10,HG00623_cut[1])&HG00623_filter$Depth<min(240,HG00623_cut[2]),]
HG00623_filter = HG00623_filter[!(HG00623_filter$chr==6&HG00623_filter$pos>29000000&HG00623_filter$pos<35000000),]
HG00623_filter = HG00623_filter[!(HG00623_filter$chr==14&HG00623_filter$pos>105400000),]
quartz(w=16,h=8)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG00623 (Female, CLM, LCL)")
x=500
mid_x = NULL
tail(HG00623)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG00623 (Female, CHS, LCL)")
x=500
mid_x = NULL
for (i in 1:23){
chr = i
if (i==23) chr="X"
tmp = HG00623_filter[HG00623_filter$chr==chr,]
col = ifelse(i%%2==1,"blue","cornflowerblue")
points(tmp$pos+x,tmp$Alt_D/(tmp$Alt_D+tmp$Ref_D),col=col,pch=20)
mid_x = c(mid_x,mean(tmp$pos+x))
x = max(tmp$pos+x)+40000000
}
axis(1,at=mid_x,labels=c(chr_name,"chrX"),las=2,lwd=2)
abline(h=mean(HG00623_filter$Alt_D/(HG00623_filter$Alt_D+HG00623_filter$Ref_D)),lwd=2,lty=2)
HG00142 = read.table("batch0/processed/HG00142.hetero.txt",sep="\t",header=F)
names(HG00142) = NAME
HG00142_filter = HG00142[HG00142$Depth<248,]
HG00142_cut = quantile(HG00142_filter$Depth,c(0.1,0.9))
HG00142_filter = HG00142_filter[HG00142_filter$Ref_D>3&HG00142_filter$Alt_D>3,]
HG00142_filter = HG00142_filter[HG00142_filter$Depth>max(10,HG00142_cut[1])&HG00142_filter$Depth<min(240,HG00142_cut[2]),]
HG00142_filter = HG00142_filter[!(HG00142_filter$chr==6&HG00142_filter$pos>29000000&HG00142_filter$pos<35000000),]
HG00142_filter = HG00142_filter[!(HG00142_filter$chr==14&HG00142_filter$pos>105400000),]
quartz(w=16,h=8)
tail(HG00142)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG00142 (Female, GBR, LCL)")
x=500
mid_x = NULL
for (i in 1:23){
chr = i
if (i==23) chr="X"
tmp = HG00142_filter[HG00142_filter$chr==chr,]
col = ifelse(i%%2==1,"blue","cornflowerblue")
points(tmp$pos+x,tmp$Alt_D/(tmp$Alt_D+tmp$Ref_D),col=col,pch=20)
mid_x = c(mid_x,mean(tmp$pos+x))
x = max(tmp$pos+x)+40000000
}
axis(1,at=mid_x,labels=c(chr_name,"chrX"),las=2,lwd=2)
abline(h=mean(HG00142_filter$Alt_D/(HG00142_filter$Alt_D+HG00142_filter$Ref_D)),lwd=2,lty=2)
quartz(w=16,h=8)
plot(x=1,y=1,xlim=c(0,3900000000),type="n",xaxt="n",ylab="alternative allele frequency",ylim=c(0,1),xlab="",main="HG00142 (Male, GBR, LCL)")
x=500
mid_x = NULL
for (i in 1:24){
chr = i
if (i==23) chr="X"
if(i==24) chr="Y"
tmp = HG00142_filter[HG00142_filter$chr==chr,]
col = ifelse(i%%2==1,"blue","cornflowerblue")
points(tmp$pos+x,tmp$Alt_D/(tmp$Alt_D+tmp$Ref_D),col=col,pch=20)
mid_x = c(mid_x,mean(tmp$pos+x))
x = max(tmp$pos+x)+40000000
}
axis(1,at=mid_x,labels=c(chr_name,"chrX"),las=2,lwd=2)
tail(HG01142)
tail(HG00142)
axis(1,at=mid_x,labels=c(chr_name,"chrX","chrY"),las=2,lwd=2)
abline(h=mean(HG00142_filter$Alt_D/(HG00142_filter$Alt_D+HG00142_filter$Ref_D)),lwd=2,lty=2)
sample_info=read.table("~/Desktop/20130606_sample_info.txt")
sample_info=read.table("~/Desktop/EBV.txt",)
sample_info=read.table("~/Desktop/EBV.txt",fill=T)
head(sample_info)
EBV = sample_info[-1,1]
head(EBV)
EBV = as.numeric(EBV)
hist(EBV)
hist(EBV,breaks=50)
hist(log10(EBV),breaks=50)
library(MADSEQ)
data(aneuploidyChrom)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T)
normal
monosomy = runModelMonosomy(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
monosomy
mitotic_trisomy = runModelTrisomy(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
mitotic_trisomy
meiotic_trisomy = runModelFour(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=F)
meiotic_trisomy
print(meiotic_trisomy)
best_model = modelSelection(normal, monosomy, mitotic_trisomy, meiotic_trisomy)
deltaBIC = modelComparison(normal, monosomy, mitotic_trisomy, meiotic_trisomy)
deltaBIC
save(meiotic_trisomy,"data//meiotic_trisomy.RData")
save(meiotic_trisomy,file="data//meiotic_trisomy.RData")
summary(meiotic_trisomy)
summary(meiotic_trisomy)
plotPosterior(meiotic_trisomy)
plotPosterior(normal)
plotPosterior(mitotic_trisomy)
normal = runModelOne(data=aneuploidyChrom, data_coverage = aneuploidy_coverage,
control_coverage = genome_coverage, checkConvergence=T,plot=T,nStep=30000,burnin=20000)
plotPosterior(normal)
head(normal)
hist(normal$posterior[,"p1"])
hist(normal$posterior[,"p1"],prob=T)
lines(density(normal$posterior[,"p1"]))
plotFraction(meiotic_trisomy)
plotMixture(meiotic_trisomy)
par(mfrow=c(1,1))
plotMixture(meiotic_trisomy)
plotMixture(meiotic_trisomy)
library(MADSEQ)
plotMixture(meiotic_trisomy)
dim(normal$posterior)[2]
dim(monosomy$posterior)[2]
dim(mitotic_trisomy$posterior)[2]
dim(meiotic_trisomy$posterior)[2]
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
hist(tmp_dat,xlab="",lwd=2,col=rgb(0,0,1,0.2),main=paste("posterior density of",i),breaks=25)
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
test = normal$posterior[,"p1"]
table(test)
mean(test)
median(test)
1/200
2/200
100/200
199/200
198/200
109/200
190/200
191/200
names(normal$posterior)
colnames(normal$posterior)
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else if (i=="p1"|i=="p2"|i=="p3"|i=="p4"|i=="p5"){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
?hist
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else if (i=="p1"|i=="p2"|i=="p3"|i=="p4"|i=="p5"){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="",border="blue")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else if (i=="p1"|i=="p2"|i=="p3"|i=="p4"|i=="p5"){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="",border="blue",lwd=2)
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else if (i=="p1"|i=="p2"|i=="p3"|i=="p4"|i=="p5"){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="",border="blue",lwd=2)
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
plotPosterior = function(object,variable="all"){
data = as.data.frame(object$posterior)
n_total = dim(data)[2]
all_name = names(data)
# if want to check all the posterior distribution
if(paste(variable,collapse = "")=="all"){
par(mfrow=c(3,2))
par(mar=c(2.5,4,3,2))
for (i in all_name){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else if (i=="p1"|i=="p2"|i=="p3"|i=="p4"|i=="p5"){
par(lwd=2)
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="",border="blue")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
# only want to check some of the posterior distribution
else{
n_plot = length(variable)
if (n_plot>=6) par(mfrow=c(3,2))
else if (n_plot>1) par(mfrow=c(ceiling(n_plot/2),2))
else if (n_plot==1) par(mfrow=c(1,1))
par(mar=c(2.5,4,3,2))
for (i in variable){
tmp_dat = data[,i]
if (min(tmp_dat)==max(tmp_dat)){
hist(tmp_dat,prob=TRUE,main=paste("posterior density of",i),xlab="")
}
else{
plot(density(tmp_dat),xlab="",lwd=2,col="blue",main=paste("posterior density of",i))
}
}
}
}
plotPosterior(normal)
plotPosterior(meiotic_trisomy)
