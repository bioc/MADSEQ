library(vcfR)
?read.vcfR
id_vcf = read.vcfR(vcf)
id_vcf@meta
id_vcf@fix
head(id_vcf@fix)
head(id_vcf@gt)
head(AAF)
basic = id_vcf@fix
head(basic)
colnames(basic)
basic_factor = c("CHROM","POS","REF","ALT","QUAL","FILTER")
basic = id_vcf@fix[,colnames(basic)%in%basic_factor]
head(basic)
genotype = id_vcf@gt
head(genotype)
gt_info = genotype[,2]
head(gt_info)
gt = strsplit(gt_info,split=":",fixed=T)[[1]][1]
head(gt)
gt = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][1])
head(gt)
table(gt)
ad = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][2])
head(ad)
ref_d = sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][1])
alt_d = sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][2])
head(ref_d)
head(alt_d)
head(AAF)
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=basic[,"pos"],end=basic[,"POS"]))
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=basic[,"POS"],end=basic[,"POS"]))
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=as.numeric(basic[,"POS"]),end=as.numeric(basic[,"POS"])))
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
ref_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][1]))
alt_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][2]))
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=as.numeric(basic[,"POS"]),end=as.numeric(basic[,"POS"])))
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
head(mcols)
mcols(res) = mcols
res
summary(res)
summary(mcols)
res = res[mcols(res)$GT=="0/1"|mcols(res)$GT=="1/0"]
res
res = res[!is.na(mcols(res)$Alt_D)&
!is.na(mcols(res)$Ref_D)&
!is.na(mcols(res)$REF)&
!is.na(mcols(res)$ALT)]
names(res) = seq(1:length(res))
es
res
res = keepStandardChromosomes(res)
quantile(mcols(res)$DP,seq(0,1,0.01))
quantile(mcols(res)$Ref_D,seq(0,1,0.01))
quantile(mcols(res)$Alt_D,seq(0,1,0.01))
DP_cut = quantile(mcols(res)$DP,0.05)
Ref_D_cut = quantile(mcols(res)$Ref_D,0.05)
Alt_D_cut = quantile(mcols(res)$Alt_D,0.05)
res = res[mcols(res)$DP>DP_cut&mcols(res)$Ref_D>Ref_D_cut&mcols(res)$Alt_D>Alt_D_cut]
res = res[nchar(mcols(res)$REF)==1&nchar(mcols(res)$ALT)==1]
res = res[nchar(unlist(mcols(res)$ALT))==1]
res = removeGap(res,genome)
res = removeHLA(res,genome)
res = removeAQP(res,genome)
res = filter_hetero(res,binsize=10,plot=plot)
head(filter_hetero)
filter_hetero
res = filter_hetero(res,binsize=10,plot=plot)
res = filter_hetero(res,binsize=10,plot=T)
res = filter_hetero(res,binsize=10,plot=T)
target_gr = rtracklayer::import(target_bed)
target_gr = keepStandardChromosomes(target_gr)
target_gr
vcf = read.vcfR(vcffile)
basic_factor = c("CHROM","POS","REF","ALT","QUAL","FILTER")
basic = vcf@fix[,colnames(basic)%in%basic_factor]
genotype = vcf@gt
gt_info = genotype[,2]
gt = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][1])
ad = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][2])
ref_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][1]))
alt_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][2]))
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=as.numeric(basic[,"POS"]),end=as.numeric(basic[,"POS"])))
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
mcols(res) = mcols
res = res[mcols(res)$GT=="0/1"|mcols(res)$GT=="1/0"]
res = res[!is.na(mcols(res)$Alt_D)&
!is.na(mcols(res)$Ref_D)&
!is.na(mcols(res)$REF)&
!is.na(mcols(res)$ALT)]
names(res) = seq(1:length(res))
res = keepStandardChromosomes(res)
DP_cut = quantile(mcols(res)$DP,0.05)
Ref_D_cut = quantile(mcols(res)$Ref_D,0.05)
Alt_D_cut = quantile(mcols(res)$Alt_D,0.05)
res = res[mcols(res)$DP>DP_cut&mcols(res)$Ref_D>Ref_D_cut&mcols(res)$Alt_D>Alt_D_cut]
res = res[nchar(mcols(res)$REF)==1&nchar(mcols(res)$ALT)==1]
res = res[nchar(unlist(mcols(res)$ALT))==1]
res = removeGap(res,genome)
res = removeHLA(res,genome)
res = removeAQP(res,genome)
res = filter_hetero(res,binsize=10,plot=T)
library(MADSEQ)
setwd("/Volumes/home/greally-lab/Yu_Andrew/MADSEQ/new_04302018")
target = "hg38.1kb.window.bed"
ID="NA12878"
vcf = paste0("vcf/",ID,".SNP.vcf.gz")
prepareHetero(vcffile = vcf,
target_bed = target,
genome = "hg38",
writeToFile = T,
destination = "Hetero/",
plot = T)
ID="NA12889"
vcf = paste0("vcf/",ID,".SNP.vcf.gz")
pdf(file=paste0("plot/AAF/",ID,"_AAF.pdf"),width=8,height=8)
prepareHetero(vcffile = vcf,
target_bed = target,
genome = "hg38",
writeToFile = T,
destination = "Hetero/",
plot = T)
dev.off()
?keepStandardChromosomes
library(MADSEQ)
library(MADSEQ)
vcf = paste0("vcf/",ID,".SNP.vcf.gz")
pdf(file=paste0("plot/AAF/",ID,"_AAF.pdf"),width=8,height=8)
prepareHetero(vcffile = vcf,
target_bed = target,
genome = "hg38",
writeToFile = T,
destination = "Hetero/",
plot = T)
vcf = paste0("vcf/",ID,".SNP.vcf.gz")
pdf(file=paste0("plot/AAF/",ID,"_AAF.pdf"),width=8,height=8)
prepareHetero(vcffile = vcf,
target_bed = target,
genome = "hg38",
writeToFile = T,
destination = "Hetero/",
plot = T)
library(MADSEQ)
dev.off()
prepareHetero(vcffile = vcf,
target_bed = target,
genome = "hg38",
writeToFile = T,
destination = "Hetero/",
plot = T)
library(devtools)
devtools::document()
devtools::document()
library(devtools)
devtools::document()
devtools::document()
devtools::document()
setwd("/Volumes/data/Project/Aneuploidy/MADSEQ")
devtools::document()
aneuploidy_vcf = system.file("extdata","aneuploidy.vcf.gz",package="MADSEQ")
aneuploidy_vcf
target = system.file("extdata","target.bed",package="MADSEQ")
target_bed = target
vcffile=aneuploidy_vcf
genome="hg19"
target_gr = rtracklayer::import(target_bed)
target_gr = keepStandardChromosomes(target_gr,pruning.mode = "coarse")
message("reading vcf file")
vcf = read.vcfR(vcffile)
message("processing vcf file")
basic_factor = c("CHROM","POS","REF","ALT","QUAL","FILTER")
basic = vcf@fix
basic = basic[,colnames(basic)%in%basic_factor]
genotype = vcf@gt
gt_info = genotype[,2]
gt = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][1])
ad = sapply(gt_info,function(x)strsplit(x,split=":",fixed=T)[[1]][2])
ref_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][1]))
alt_d = as.numeric(sapply(ad,function(x)strsplit(x,split=",",fixed=T)[[1]][2]))
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=as.numeric(basic[,"POS"]),end=as.numeric(basic[,"POS"])))
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
mcols$REF = as.character(mcols$REF)
mcols$ALT = as.character(mcols$ALT)
mcols(res) = mcols
res
res = res[mcols(res)$GT=="0/1"|mcols(res)$GT=="1/0"]
res
res = res[!is.na(mcols(res)$Alt_D)&
!is.na(mcols(res)$Ref_D)&
!is.na(mcols(res)$REF)&
!is.na(mcols(res)$ALT)]
names(res) = seq(1:length(res))
res
ov = findOverlaps(res,target_gr)
res = unique(res[queryHits(ov)])
res
message("filtering vcf file")
res = keepStandardChromosomes(res,pruning.mode = "coarse")
DP_cut = quantile(mcols(res)$DP,0.05)
Ref_D_cut = quantile(mcols(res)$Ref_D,0.05)
Alt_D_cut = quantile(mcols(res)$Alt_D,0.05)
res = res[mcols(res)$DP>DP_cut&mcols(res)$Ref_D>Ref_D_cut&mcols(res)$Alt_D>Alt_D_cut]
res
res = res[nchar(mcols(res)$REF)==1&nchar(mcols(res)$ALT)==1]
res
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
mcols(res) = mcols
res
res = GRanges(seqnames=basic[,"CHROM"],
ranges=IRanges(start=as.numeric(basic[,"POS"]),end=as.numeric(basic[,"POS"])))
mcols = data.frame(basic[,-c(1,2)],GT=gt,Ref_D=ref_d,Alt_D=alt_d,DP=ref_d+alt_d)
mcols(res) = mcols
res
res = res[mcols(res)$GT=="0/1"|mcols(res)$GT=="1/0"]
res = res[!is.na(mcols(res)$Alt_D)&
!is.na(mcols(res)$Ref_D)&
!is.na(mcols(res)$REF)&
!is.na(mcols(res)$ALT)]
names(res) = seq(1:length(res))
ov = findOverlaps(res,target_gr)
res = unique(res[queryHits(ov)])
res
mcols(res)$ALT = gsub("\\,<NON_REF>","",mcols(res)$ALT)
res
message("filtering vcf file")
res = keepStandardChromosomes(res,pruning.mode = "coarse")
DP_cut = quantile(mcols(res)$DP,0.05)
Ref_D_cut = quantile(mcols(res)$Ref_D,0.05)
Alt_D_cut = quantile(mcols(res)$Alt_D,0.05)
res = res[mcols(res)$DP>DP_cut&mcols(res)$Ref_D>Ref_D_cut&mcols(res)$Alt_D>Alt_D_cut]
res = removeGap(res,genome)
res = removeHLA(res,genome)
res = removeAQP(res,genome)
res
res = filter_hetero(res,binsize=10,plot=T)
res
library(MADSEQ)
?install.packages
ID = "NA12889"
chr="chr11"
hetero = paste0("Hetero/",ID,".SNP.vcf.gz_filtered_heterozygous.txt")
coverage = paste0("Normed_cov/",ID,"_normed_depth.txt")
model = runMadSeq(hetero=hetero,
coverage=coverage,
target_chr=chr,
nChain=2, nStep=1000, thinSteps=1, ## to save time let's run 1000 step here
adapt=500,burnin=500)  ## and also reduce adapt and burnin step to 500
setwd("/Volumes/home/greally-lab/Yu_Andrew/MADSEQ/new_04302018")
model = runMadSeq(hetero=hetero,
coverage=coverage,
target_chr=chr,
nChain=2, nStep=1000, thinSteps=1, ## to save time let's run 1000 step here
adapt=500,burnin=500)  ## and also reduce adapt and burnin step to 500
chr
library("MADSEQ")
library(ggplot2)
library(reshape2)
library(dplyr)
options(stringsAsFactors = F)
plotBIC = function(data,ID){
g = ggplot(data,aes(x=chr,y=deltaBIC,colour=chromosome_status,group=chromosome_status)) + geom_point(alpha=0.8) + geom_line()
g = g + theme_bw() + scale_x_discrete(limits=CHR)
g = g + scale_color_manual(values = c(normal="black",meiotic_trisomy="orange",monosomy="green4",LOH="magenta",mitotic_trisomy="blue"))
g = g + labs(x="Chromosome",y="log(delta BIC)",title=ID)
g = g + theme(legend.position="bottom",
axis.title = element_text(size=14,colour="black"),
axis.text.x = element_text(size=10,colour="black",angle=45,hjust = 1,vjust = 1),
axis.text.y = element_text(size=10,colour="black"),
title = element_text(size=14),
legend.text = element_text(size=12),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size=0.3))
g = g + geom_hline(yintercept = -log(10), linetype=2, colour="black",alpha=0.5)
g
}
readBIC = function(file){
if(file.exists(file)){
tmp_chr = readRDS(file)
if(is.null(tmp_chr)){
tmp_BIC = c("BIC_normal"=0,"BIC_mitotic_trisomy"=1,"BIC_monosomy"=1,"BIC_LOH"=1,"BIC_meiotic_trisomy"=1)
}
else{
tmp_BIC = deltaBIC(tmp_chr)
tmp_BIC = tmp_BIC[c("BIC_normal","BIC_mitotic_trisomy","BIC_monosomy","BIC_LOH","BIC_meiotic_trisomy")]
}
}
else{
message(paste0("There is no result for ",file))
tmp_BIC = c("BIC_normal"=0,"BIC_mitotic_trisomy"=1,"BIC_monosomy"=1,"BIC_LOH"=1,"BIC_meiotic_trisomy"=1)
}
tmp_BIC
}
id = read.table("id.txt",sep="\t",header=F)[,1]
CHR = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9",
"chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18",
"chr19","chr20","chr21","chr22","chrX")
CHR2 = gsub("chr","",CHR)
not_normal_id = NULL
not_normal_result = NULL
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
setwd("/Volumes/home/ykong/Columbia/new_05012018")
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
setwd("/Volumes/home/ykong/Columbia/new_05012018")
not_normal_id = NULL
not_normal_result = NULL
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
id = read.table("id.txt",sep="\t",header=F)[,1]
CHR = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9",
"chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18",
"chr19","chr20","chr21","chr22","chrX")
CHR2 = gsub("chr","",CHR)
not_normal_id = NULL
not_normal_result = NULL
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
not_normal_id = NULL
not_normal_result = NULL
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
id
id = id[1:5]
not_normal_id = NULL
not_normal_result = NULL
for (k in 1:length(id)){
#if(k%%5==0)
print(k)
indv = id[k]
BIC = as.data.frame(t(sapply(CHR2,function(x)readBIC(paste0("result/",indv,"_",x,".RDS")))))
#assign(paste0(indv,"_BIC"),BIC)
saveRDS(BIC,file=paste0("BIC/",indv,"_BIC.RDS"))
if(all(BIC[,1]<10)) next
else{
not_normal_id = c(not_normal_id,indv)
## plot
BIC_net = BIC
BIC_net[,2:5] = BIC_net[,2:5] + 10
BIC_net = BIC_net - apply(BIC_net,1,min)
BIC_net_log = -log(BIC_net)
BIC_log = apply(BIC_net_log,2,function(x)ifelse(x==Inf,1,x))
rownames(BIC_log) = CHR
BIC_log = data.frame(BIC_log,chr=CHR)
BIC_melt = melt(BIC_log,id.vars = "chr")
colnames(BIC_melt) = c("chr","chromosome_status","deltaBIC")
BIC_melt$chromosome_status = gsub("BIC_","",BIC_melt$chromosome_status)
plotBIC(BIC_melt,indv)
ggsave(paste0("plot/BIC/",indv,"_BIC.pdf"),width=9,height=6)
# model selected
tmp_model = unname(apply(BIC_net,1,function(x)colnames(BIC_net)[which(x==0)]))
tmp_model = gsub("BIC_","",tmp_model)
#all_result = rbind(all_result,tmp_model)
not_normal_result = rbind(not_normal_result,tmp_model)
}
}
if(!is.null(not_normal_result)){
rownames(not_normal_result) = not_normal_id
colnames(not_normal_result) = CHR
saveRDS(not_normal_result,file=paste0("result_not_normal_table.RDS"))
}
not_normal_result
a = readRDS("result/fetal0138F_15.RDS")
a
